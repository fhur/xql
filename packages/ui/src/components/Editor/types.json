[
    {
        "module": "backend",
        "types": "\n\n\n\n/// <reference types=\"node\" />\ndeclare module \"@synthql/backend/src/types/index\" {\n    import { JoinOp, Query } from '@synthql/queries';\n    import { BinaryOperator } from 'kysely';\n    export type AnyDb = Record<string, Record<string, any>>;\n    export type AnyQuery = Query<AnyDb, string>;\n    export type AnyTable = string;\n    export type Cardinality = 'one' | 'maybe' | 'many';\n    export interface AugmentedQuery {\n        /**\n         * A unique identifier for the query, inside the query tree.\n         */\n        id: string;\n        /**\n         * A reference to the query that was augmented\n         */\n        query: AnyQuery;\n        depth: number;\n        /**\n         * The table that the query is selecting from\n         */\n        from: AugmentedTable;\n        /**\n         * The columns that the query is selecting.\n         */\n        select: Array<SelectionColumn | SelectionJsonbAgg>;\n        /**\n         * The where clause of the query.\n         */\n        where: Array<WhereOp>;\n        children: AugmentedQuery[];\n        leftJoin?: {\n            joinOp: JoinOp;\n            joinTable: AugmentedTable;\n            ownColumn: AugmentedColumn;\n            otherColumn: AugmentedColumn;\n        };\n    }\n    type WhereOp = WhereBinaryOp | WhereRefOp;\n    export type OpValue = {\n        type: 'column';\n        column: AugmentedColumn;\n    } | {\n        type: 'value';\n        value: any;\n    };\n    export interface WhereBinaryOp {\n        type: 'binary';\n        lhs: OpValue;\n        op: BinaryOperator;\n        rhs: OpValue;\n    }\n    interface WhereRefOp {\n        type: 'ref';\n        lhs: AugmentedColumn;\n        rhs: AugmentedColumn;\n    }\n    export interface SelectionColumn {\n        type: 'column';\n        column: string;\n        /**\n         * A unique identifier for the column, inside the query result.\n         * Example:\n         *\n         * ```\n         * select table.alias.column as id\n         * from ...\n         * ```\n         */\n        id: string;\n        table: AugmentedTable;\n    }\n    export function isSelectionColumn(selection: SelectionColumn | SelectionJsonbAgg): selection is SelectionColumn;\n    export function isSelectionJsonbAgg(selection: SelectionColumn | SelectionJsonbAgg): selection is SelectionJsonbAgg;\n    interface SelectionJsonbAgg {\n        type: 'jsonb_agg';\n        id: string;\n        table: AugmentedTable;\n        columns: SelectionColumn[];\n        includeColumn: string;\n    }\n    export interface AugmentedTable {\n        alias: string;\n        name: string;\n        schema: string;\n    }\n    export interface AugmentedColumn {\n        umn: string;\n        table: AugmentedTable;\n    }\n}\ndeclare module \"@synthql/backend/src/cache\" {\n    import { Query, QueryResult, Table } from '@synthql/queries';\n    import { DB } from \"@synthql/backend/src/tests/db\";\n    export function from<TTable extends Table<DB>>(table: TTable): import(\"@synthql/queries/src/query\").QueryBuilder<DB, TTable, {}, \"many\", {}, {}, undefined, [\"id\"]>;\n    export function actor(): import(\"@synthql/queries/src/query\").QueryBuilder<DB, \"actor\", {}, \"many\", {}, {\n        actor_id: true;\n        first_name: true;\n        last_name: true;\n        last_update: true;\n    }, undefined, [\"actor_id\"]>;\n    export function findActorById(actorId: number): {\n        from: \"actor\";\n        where: {\n            actor_id: number;\n        };\n        select: {\n            actor_id: true;\n            first_name: true;\n            last_name: true;\n            last_update: true;\n        };\n        include: {};\n        limit: number | undefined;\n        cardinality: \"maybe\";\n        lazy: undefined;\n        groupingId: [\"actor_id\"];\n    };\n    export function findActors(): {\n        from: \"actor\";\n        where: {};\n        select: {\n            actor_id: true;\n            first_name: true;\n            last_name: true;\n            last_update: true;\n        };\n        include: {};\n        limit: number | undefined;\n        cardinality: \"many\";\n        lazy: undefined;\n        groupingId: [\"actor_id\"];\n    };\n    export function language(): import(\"@synthql/queries/src/query\").QueryBuilder<DB, \"language\", {}, \"many\", {}, {\n        language_id: true;\n        name: true;\n        last_update: true;\n    }, undefined, [\"language_id\"]>;\n    export function findLanguageById(id: WhereClause<DB, 'language', 'language_id'>): import(\"@synthql/queries/src/query\").QueryBuilder<DB, \"language\", {\n        language_id: WhereClause<DB, \"language\", \"language_id\">;\n    }, \"many\", {}, {\n        language_id: true;\n        name: true;\n        last_update: true;\n    }, undefined, [\"language_id\"]>;\n    export function movie(): import(\"@synthql/queries/src/query\").QueryBuilder<DB, \"film\", {}, \"many\", {\n        language: {\n            from: \"language\";\n            where: {\n                language_id: WhereClause<DB, \"language\", \"language_id\">;\n            };\n            select: {\n                language_id: true;\n                name: true;\n                last_update: true;\n            };\n            include: {};\n            limit: number | undefined;\n            cardinality: \"one\";\n            lazy: undefined;\n            groupingId: [\"language_id\"];\n        };\n        film_actor: {\n            from: \"film_actor\";\n            where: {\n                film_id: import(\"@synthql/queries\").RefOp<DB>;\n            };\n            select: {};\n            include: {};\n            limit: number | undefined;\n            cardinality: \"many\";\n            lazy: undefined;\n            groupingId: [\"id\"];\n        };\n        actors: {\n            from: \"actor\";\n            where: {\n                actor_id: import(\"@synthql/queries\").RefOp<DB>;\n            };\n            select: {\n                actor_id: true;\n                first_name: true;\n                last_name: true;\n                last_update: true;\n            };\n            include: {};\n            limit: number | undefined;\n            cardinality: \"many\";\n            lazy: undefined;\n            groupingId: [\"actor_id\"];\n        };\n    }, {\n        title: true;\n        description: true;\n        release_year: true;\n    }, undefined, [\"film_id\"]>;\n    export function country(): import(\"@synthql/queries/src/query\").QueryBuilder<DB, \"country\", {}, \"many\", {}, {\n        country_id: true;\n        country: true;\n        last_update: true;\n    }, undefined, [\"country_id\"]>;\n    export function city(): import(\"@synthql/queries/src/query\").QueryBuilder<DB, \"city\", {}, \"many\", {\n        country: {\n            from: \"country\";\n            where: {\n                country_id: WhereClause<DB, \"country\", \"country_id\">;\n            };\n            select: {\n                country_id: true;\n                country: true;\n                last_update: true;\n            };\n            include: {};\n            limit: number | undefined;\n            cardinality: \"one\";\n            lazy: undefined;\n            groupingId: [\"country_id\"];\n        };\n    }, {\n        city_id: true;\n        city: true;\n        last_update: true;\n        country_id: true;\n    }, undefined, [\"city_id\"]>;\n    export function findCityById(id: WhereClause<DB, 'city', 'city_id'>): {\n        from: \"city\";\n        where: {\n            city_id: WhereClause<DB, \"city\", \"city_id\">;\n        };\n        select: {\n            city_id: true;\n            city: true;\n            last_update: true;\n            country_id: true;\n        };\n        include: {\n            country: {\n                from: \"country\";\n                where: {\n                    country_id: WhereClause<DB, \"country\", \"country_id\">;\n                };\n                select: {\n                    country_id: true;\n                    country: true;\n                    last_update: true;\n                };\n                include: {};\n                limit: number | undefined;\n                cardinality: \"one\";\n                lazy: undefined;\n                groupingId: [\"country_id\"];\n            };\n        };\n        limit: number | undefined;\n        cardinality: \"maybe\";\n        lazy: undefined;\n        groupingId: [\"city_id\"];\n    };\n}\ndeclare module \"@synthql/backend/src/tests/select.test\" { }\ndeclare module \"@synthql/backend/src/util/collectAsync\" {\n    export function collectAsync<T>(gen: AsyncGenerator<T>): Promise<T[]>;\n}\n/**\n * Performs a LEFT JOIN on two arrays using a hash table.\n */\ndeclare function hashLeftJoin<TLeft, TRight>(left: TLeft[], right: TRight[], leftKey: (l: TLeft) => string, rightKey: (r: TRight) => string): Array<[TLeft, TRight | undefined]>;\n\n\n declare module \"@synthql/backend\" { export * from \"@synthql/backend/src/index\"; }",
        "fileName": "@synthql/backend/index.d.ts"
    },
    {
        "module": "queries",
        "types": "/// <reference types=\"node\" />\ndeclare module \"@synthql/queries/src/types/types\" {\n    import type { BinaryOperator } from 'kysely';\n    /**\n     * The name of a table in the database.\n     */\n    export type Table<DB> = keyof DB & string;\n    /**\n     * The name of a column in the database.\n     *\n     * @param TTable The table the column belongs to.\n     */\n    export type Column<DB, TTable extends Table<DB>> = keyof DB[TTable] & string;\n    export type ColumnReference<DB> = {\n        [TTable in keyof DB]: DB[TTable] extends object ? `${TTable & string}.${(keyof DB[TTable] & string) | '*'}` : never;\n    }[keyof DB];\n    /**\n     * The value of a column in the database.\n     *\n     * Our schemas are not null-strict, so every column can be null.\n     *\n     * @param TTable The table the column belongs to.\n     * @param TColumn The column the value belongs to.\n     */\n    export type ColumnValue<DB, TTable extends Table<DB>, TColumn extends Column<DB, TTable>> = DB[TTable][TColumn] extends Selectable<infer T> ? T : DB[TTable][TColumn] extends Selectable<infer T> | null ? T | null : DB[TTable][TColumn];\n    type Selectable<T> = {\n        readonly __select__: T;\n    };\n    /**\n     * A binary operator.\n     */\n    type BinaryOp<DB, TTable extends Table<DB>, TColumn extends Column<DB, TTable>> = {\n        [op in BinaryOperator]?: ColumnValue<DB, TTable, TColumn> | Array<ColumnValue<DB, TTable, TColumn>> | RefOp<DB>;\n    };\n    export type JoinOp = '=' | '= any';\n    export type RefOp<DB> = {\n        $ref: {\n            table: Table<DB>;\n            column: string;\n            op?: JoinOp;\n        };\n    };\n    export function isRefOp(op: any): op is RefOp<any>;\n    export type WhereClause<DB, TTable extends Table<DB>, TColumn extends Column<DB, TTable>> = ColumnValue<DB, TTable, TColumn> | BinaryOp<DB, TTable, TColumn> | RefOp<DB>;\n    export type Where<DB, TTable extends Table<DB>> = {\n        [TColumn in Column<DB, TTable>]?: WhereClause<DB, TTable, TColumn>;\n    };\n    export type Select<DB, TTable extends Table<DB>> = {\n        [TColumn in Column<DB, TTable>]?: true;\n    };\n    export type Include<DB> = {\n        [k in string]: Query<DB, Table<DB>> extends Query<DB, infer TTable> ? Query : never;\n    };\n    export type Query<DB, TTable extends Table<DB>> = {\n        from: TTable;\n        where: Where<DB, TTable>;\n        select: Select<DB, TTable>;\n        include?: Include<DB>;\n        limit?: number;\n        cardinality?: 'one' | 'maybe' | 'many';\n        lazy?: true;\n        groupingId?: string[];\n    };\n}\ndeclare module \"@synthql/queries/src/ref\" {\n    import { Column, ColumnReference, RefOp, Table } from \"@synthql/queries/src/types/types\";\n    export function col<DB>(ref: ColumnReference<DB>): RefOp<DB>;\n    export function ref<DB>(): {\n        table: <TTable extends Table<DB>>(table: TTable) => {\n            column: <TColumn extends Column<DB, TTable>>(column: TColumn) => RefOp<DB>;\n            eqAny: <TColumn_1 extends Column<DB, TTable>>(column: TColumn_1) => RefOp<DB>;\n        };\n    };\n}\ndeclare module \"@synthql/queries/src/types/QueryResult\" {\n    import { Column, ColumnValue, Query, Table } from \"@synthql/queries/src/types/types\";\n    export type QueryResult<DB, TQuery> = TQuery extends Query<DB, infer TTable> ? ApplyCardinality<DB, TTable, TQuery> : never;\n    type QueryResultInner<DB, TTable extends Table<DB>, TQuery extends Query> = QueryResultFromSelect<DB, TTable, TQuery> & QueryResultFromInclude<DB, TTable, TQuery>;\n    type QueryResultFromSelect<DB, TTable extends Table<DB>, TQuery extends Query> = {\n        [TCol in SelectedColumns<DB, TTable, TQuery>]: ColumnValue<DB, TTable, TCol>;\n    };\n    type SelectedColumns<DB, TTable extends Table<DB>, TQuery extends Query> = TQuery['select'] extends true ? Column<DB, TTable> : // Select only the specified columns\n    Column<DB, TTable> & keyof TQuery['select'];\n    type IncludedColumns<DB, TTable extends Table<DB>, TQuery extends Query> = keyof TQuery['include'];\n    type QueryResultFromInclude<DB, TTable extends Table<DB>, TQuery extends Query> = {\n        [TCol in IncludedColumns<DB, TTable, TQuery>]: QueryResult<DB, TQuery['include'][TCol]>;\n    };\n    type LazyQueryResult<DB, TTable extends Table<DB>, TQuery extends Query> = {\n        status: 'pending';\n    } | {\n        status: 'done';\n        data: QueryResult<DB, TQuery>;\n    } | {\n        status: 'error';\n        error: any;\n    };\n    type MaybeQueryResult<DB, TTable extends Table<DB>, TQuery extends Query> = null | QueryResultInner<DB, TTable, TQuery>;\n    type ManyQueryResult<DB, TTable extends Table<DB>, TQuery extends Query> = QueryResultInner<DB, TTable, TQuery>[];\n    type ApplyCardinality<DB, TTable extends Table<DB>, TQuery extends Query> = TQuery extends {\n        lazy: true;\n    } ? LazyQueryResult<DB, TTable, TQuery> : TQuery extends {\n        cardinality: 'many';\n    } ? ManyQueryResult<DB, TTable, TQuery> : TQuery extends {\n        cardinality: 'one';\n    } ? QueryResultInner<DB, TTable, TQuery> : TQuery extends {\n        cardinality: 'maybe';\n    } ? MaybeQueryResult<DB, TTable, TQuery> : never;\n}\ndeclare module \"@synthql/queries/src/query\" {\n    import { Column, Include, Select, Table, Where } from \"@synthql/queries/src/types/types\";\n    export class QueryBuilder<DB, TTable extends Table<DB>, TWhere extends Where<DB, TTable>, TCardinality extends 'one' | 'maybe' | 'many', TInclude extends Include<DB>, TSelect extends Select<DB, TTable>, TLazy extends true | undefined, TGroupingId extends string[]> {\n        private _from;\n        private _where;\n        private _select;\n        private _include;\n        private _limit;\n        private _cardinality;\n        private _lazy;\n        private _groupingId;\n        constructor(_from: TTable, _where: TWhere, _select: TSelect, _include: TInclude, _limit: number | undefined, _cardinality: TCardinality, _lazy: TLazy, _groupingId: TGroupingId);\n        private build;\n        /**\n         * Sets the limit of the query.\n         */\n        limit(limit: number): QueryBuilder<DB, TTable, TWhere, TCardinality, TInclude, TSelect, TLazy, TGroupingId>;\n        /**\n         * Builds a query that returns exactly one row. Will throw an error if the query returns 0.\n         *\n         * Also sets the limit to 1.\n         */\n        one(): {\n            from: TTable;\n            where: TWhere;\n            select: TSelect;\n            include: TInclude;\n            limit: number | undefined;\n            cardinality: \"one\";\n            lazy: TLazy;\n            groupingId: TGroupingId;\n        };\n        /**\n         * Builds a query that returns many rows.\n         */\n        many(): {\n            from: TTable;\n            where: TWhere;\n            select: TSelect;\n            include: TInclude;\n            limit: number | undefined;\n            cardinality: \"many\";\n            lazy: TLazy;\n            groupingId: TGroupingId;\n        };\n        /**\n         * Builds a query with a cardinality of 'maybe'. This means that the query will return 0 or 1 rows.\n         */\n        maybe(): {\n            from: TTable;\n            where: TWhere;\n            select: TSelect;\n            include: TInclude;\n            limit: number | undefined;\n            cardinality: \"maybe\";\n            lazy: TLazy;\n            groupingId: TGroupingId;\n        };\n        select<TSelect extends Select<DB, TTable>>(select: TSelect): QueryBuilder<DB, TTable, TWhere, TCardinality, TInclude, TSelect, TLazy, TGroupingId>;\n        /**\n         * Select specific columns from the table. `columns` is a shorthand for `select`. Example:\n         *\n         * ```ts\n         * const q = from('actor')\n         *   .columns('actor_id', 'last_name')\n         *   .many()\n         *\n         * // is equivalent to\n         * const q = from('actor')\n         *   .select({\n         *      actor_id: true,\n         *      last_name: true,\n         *   })\n         * ```\n         */\n        columns<TKeys extends Array<Column<DB, TTable>>>(...keys: TKeys): QueryBuilder<DB, TTable, TWhere, TCardinality, TInclude, { [k in TKeys[number]]: true; }, TLazy, TGroupingId>;\n        include<TInclude extends Include<DB>>(include: TInclude): QueryBuilder<DB, TTable, TWhere, TCardinality, TInclude, TSelect, TLazy, TGroupingId>;\n        alsoInclude<TNewInclude extends Include<DB>>(include: TNewInclude): QueryBuilder<DB, TTable, TWhere, TCardinality, TInclude & TNewInclude, TSelect, TLazy, TGroupingId>;\n        where<TWhere extends Where<DB, TTable>>(where: TWhere): QueryBuilder<DB, TTable, TWhere, TCardinality, TInclude, TSelect, TLazy, TGroupingId>;\n        lazy(): QueryBuilder<DB, TTable, TWhere, TCardinality, TInclude, TSelect, true, TGroupingId>;\n        groupingId<TGroupingId extends string[]>(...id: TGroupingId): QueryBuilder<DB, TTable, TWhere, TCardinality, TInclude, TSelect, TLazy, TGroupingId>;\n    }\n    export function query<DB>(): {\n        from<TTable extends Table<DB>>(table: TTable): QueryBuilder<DB, TTable, {}, \"many\", {}, {}, undefined, [\"id\"]>;\n    };\n}\ndeclare module \"@synthql/queries/src/index\" {\n    export { col, ref } from \"@synthql/queries/src/ref\";\n    export * from \"@synthql/queries/src/types/types\";\n    export * from \"@synthql/queries/src/types/QueryResult\";\n    export { query } from \"@synthql/queries/src/query\";\n}\ndeclare module \"@synthql/queries/src/expression/Expression\" {\n    export type Primitive = string | number | boolean | null | Date;\n    export const unaryOperators: readonly [\"not\", \"-\", \"exists\", \"not exists\"];\n    export type UnaryOperator = (typeof unaryOperators)[number];\n    export const binaryOperators: readonly [\"=\", \"==\", \"!=\", \"<>\", \">\", \">=\", \"<\", \"<=\", \"in\", \"not in\", \"is\", \"is not\", \"like\", \"not like\", \"match\", \"ilike\", \"not ilike\", \"@>\", \"<@\", \"&&\", \"?\", \"?&\", \"!<\", \"!>\", \"<=>\", \"!~\", \"~\", \"~*\", \"!~*\", \"@@\", \"@@@\", \"!!\", \"<->\", \"regexp\", \"+\", \"-\", \"*\", \"/\", \"%\", \"^\", \"&\", \"|\", \"#\", \"<<\", \">>\", \"&&\", \"||\"];\n    export type BinaryOperator = (typeof binaryOperators)[number];\n    export const nAryOperators: readonly [\"and\", \"or\", \"=\", \"==\", \"!=\", \"<>\", \">\", \">=\", \"<\", \"<=\", \"in\", \"not in\", \"is\", \"is not\", \"like\", \"#>\", \"#>>\", \"not like\", \"match\", \"ilike\", \"not ilike\", \"@>\", \"<@\", \"&&\", \"?\", \"?&\", \"!<\", \"!>\", \"<=>\", \"!~\", \"~\", \"~*\", \"!~*\", \"@@\", \"@@@\", \"!!\", \"<->\", \"regexp\", \"+\", \"-\", \"*\", \"/\", \"%\", \"^\", \"&\", \"|\", \"#\", \"<<\", \">>\", \"&&\", \"||\", \"->\", \"->>\", \"not\", \"-\", \"exists\", \"not exists\", \"between\", \"between symmetric\"];\n    export type NAryOperator = (typeof nAryOperators)[number];\n    /**\n     * An expression that invokes a function\n     */\n    export type ExpFunctionInvocation<Context> = ['>invoke', functionName: string, ...Exp<Context>[]];\n    /**\n     * An expression that references a column in a table\n     */\n    export type ExpColumnReference<Context> = Context;\n    /**\n     * An expression that casts an expression to a different type\n     */\n    export type ExpCast<Context> = ['>::', exp: Exp<Context>, type: string];\n    /**\n     * An expression that conditionally evaluates to one of two expressions\n     */\n    export type ExpWhen<Context> = ['>when', condition: Exp<Context>, whenTrue: Exp<Context>, whenFalse: Exp<Context>];\n    /**\n     * A literal is serialized as a value in the query\n     * e.g. `SELECT * FROM table WHERE column = 1`\n     */\n    export type ExpLiteral = ['>literal', Primitive] | Exclude<Primitive, string>;\n    /**\n     * A parameter is serialized as a placeholder in the query\n     * e.g. `SELECT * FROM table WHERE column = $1`\n     */\n    export type ExpParam = ['>param', Primitive];\n    export type Exp<Context> = ExpLiteral | ExpParam | ExpFunctionInvocation<Context> | ExpColumnReference<Context> | ExpCast<Context> | ExpWhen<Context> | [UnaryOperator, Exp<Context>] | [BinaryOperator, Exp<Context>, Exp<Context>] | [NAryOperator, Exp<Context>, ...Exp<Context>[]];\n}\ndeclare module \"@synthql/queries/src/test/pagila.db\" {\n    import type { ColumnType } from 'kysely';\n    import { Table } from \"@synthql/queries/src/index\";\n    import { Exp } from \"@synthql/queries/src/expression/Expression\";\n    export type Generated<T> = T extends ColumnType<infer S, infer I, infer U> ? ColumnType<S, I | undefined, U> : ColumnType<T, T | undefined, T>;\n    export type MpaaRating = 'G' | 'NC-17' | 'PG' | 'PG-13' | 'R';\n    export type Numeric = ColumnType<string, number | string, number | string>;\n    export type Timestamp = ColumnType<Date, Date | string, Date | string>;\n    export interface Actor {\n        actor_id: Generated<number>;\n        first_name: string;\n        last_name: string;\n        last_update: Generated<Timestamp>;\n    }\n    export interface ActorInfo {\n        actor_id: number | null;\n        film_info: string | null;\n        first_name: string | null;\n        last_name: string | null;\n    }\n    export interface Address {\n        address: string;\n        address_id: Generated<number>;\n        address2: string | null;\n        city_id: number;\n        district: string;\n        last_update: Generated<Timestamp>;\n        phone: string;\n        postal_code: string | null;\n    }\n    export interface Category {\n        category_id: Generated<number>;\n        last_update: Generated<Timestamp>;\n        name: string;\n    }\n    export interface City {\n        city: string;\n        city_id: Generated<number>;\n        country_id: number;\n        last_update: Generated<Timestamp>;\n    }\n    export interface Country {\n        country: string;\n        country_id: Generated<number>;\n        last_update: Generated<Timestamp>;\n    }\n    export interface Customer {\n        active: number | null;\n        activebool: Generated<boolean>;\n        address_id: number;\n        create_date: Generated<Timestamp>;\n        customer_id: Generated<number>;\n        email: string | null;\n        first_name: string;\n        last_name: string;\n        last_update: Generated<Timestamp | null>;\n        store_id: number;\n    }\n    export interface CustomerList {\n        'address': string | null;\n        'city': string | null;\n        'country': string | null;\n        'id': number | null;\n        'name': string | null;\n        'notes': string | null;\n        'phone': string | null;\n        'sid': number | null;\n        'zip code': string | null;\n    }\n    export interface Film {\n        description: string | null;\n        film_id: Generated<number>;\n        fulltext: string;\n        language_id: number;\n        last_update: Generated<Timestamp>;\n        length: number | null;\n        original_language_id: number | null;\n        rating: Generated<MpaaRating | null>;\n        release_year: number | null;\n        rental_duration: Generated<number>;\n        rental_rate: Generated<Numeric>;\n        replacement_cost: Generated<Numeric>;\n        special_features: string[] | null;\n        title: string;\n    }\n    export interface FilmActor {\n        actor_id: number;\n        film_id: number;\n        last_update: Generated<Timestamp>;\n    }\n    export interface FilmCategory {\n        category_id: number;\n        film_id: number;\n        last_update: Generated<Timestamp>;\n    }\n    export interface FilmList {\n        actors: string | null;\n        category: string | null;\n        description: string | null;\n        fid: number | null;\n        length: number | null;\n        price: Numeric | null;\n        rating: MpaaRating | null;\n        title: string | null;\n    }\n    export interface Inventory {\n        film_id: number;\n        inventory_id: Generated<number>;\n        last_update: Generated<Timestamp>;\n        store_id: number;\n    }\n    export interface Language {\n        language_id: Generated<number>;\n        last_update: Generated<Timestamp>;\n        name: string;\n    }\n    export interface NicerButSlowerFilmList {\n        actors: string | null;\n        category: string | null;\n        description: string | null;\n        fid: number | null;\n        length: number | null;\n        price: Numeric | null;\n        rating: MpaaRating | null;\n        title: string | null;\n    }\n    export interface PaymentP202201 {\n        amount: Numeric;\n        customer_id: number;\n        payment_date: Timestamp;\n        payment_id: Generated<number>;\n        rental_id: number;\n        staff_id: number;\n    }\n    export interface PaymentP202202 {\n        amount: Numeric;\n        customer_id: number;\n        payment_date: Timestamp;\n        payment_id: Generated<number>;\n        rental_id: number;\n        staff_id: number;\n    }\n    export interface PaymentP202203 {\n        amount: Numeric;\n        customer_id: number;\n        payment_date: Timestamp;\n        payment_id: Generated<number>;\n        rental_id: number;\n        staff_id: number;\n    }\n    export interface PaymentP202204 {\n        amount: Numeric;\n        customer_id: number;\n        payment_date: Timestamp;\n        payment_id: Generated<number>;\n        rental_id: number;\n        staff_id: number;\n    }\n    export interface PaymentP202205 {\n        amount: Numeric;\n        customer_id: number;\n        payment_date: Timestamp;\n        payment_id: Generated<number>;\n        rental_id: number;\n        staff_id: number;\n    }\n    export interface PaymentP202206 {\n        amount: Numeric;\n        customer_id: number;\n        payment_date: Timestamp;\n        payment_id: Generated<number>;\n        rental_id: number;\n        staff_id: number;\n    }\n    export interface PaymentP202207 {\n        amount: Numeric;\n        customer_id: number;\n        payment_date: Timestamp;\n        payment_id: Generated<number>;\n        rental_id: number;\n        staff_id: number;\n    }\n    export interface Rental {\n        customer_id: number;\n        inventory_id: number;\n        last_update: Generated<Timestamp>;\n        rental_date: Timestamp;\n        rental_id: Generated<number>;\n        return_date: Timestamp | null;\n        staff_id: number;\n    }\n    export interface SalesByFilmCategory {\n        category: string | null;\n        total_sales: Numeric | null;\n    }\n    export interface SalesByStore {\n        manager: string | null;\n        store: string | null;\n        total_sales: Numeric | null;\n    }\n    export interface Staff {\n        active: Generated<boolean>;\n        address_id: number;\n        email: string | null;\n        first_name: string;\n        last_name: string;\n        last_update: Generated<Timestamp>;\n        password: string | null;\n        picture: Buffer | null;\n        staff_id: Generated<number>;\n        store_id: number;\n        username: string;\n    }\n    export interface StaffList {\n        'address': string | null;\n        'city': string | null;\n        'country': string | null;\n        'id': number | null;\n        'name': string | null;\n        'phone': string | null;\n        'sid': number | null;\n        'zip code': string | null;\n    }\n    export interface Store {\n        address_id: number;\n        last_update: Generated<Timestamp>;\n        manager_staff_id: number;\n        store_id: Generated<number>;\n    }\n    export interface DB {\n        actor: Actor;\n        actor_info: ActorInfo;\n        address: Address;\n        category: Category;\n        city: City;\n        country: Country;\n        customer: Customer;\n        customer_list: CustomerList;\n        film: Film;\n        film_actor: FilmActor;\n        film_category: FilmCategory;\n        film_list: FilmList;\n        inventory: Inventory;\n        language: Language;\n        nicer_but_slower_film_list: NicerButSlowerFilmList;\n        payment_p2022_01: PaymentP202201;\n        payment_p2022_02: PaymentP202202;\n        payment_p2022_03: PaymentP202203;\n        payment_p2022_04: PaymentP202204;\n        payment_p2022_05: PaymentP202205;\n        payment_p2022_06: PaymentP202206;\n        payment_p2022_07: PaymentP202207;\n        rental: Rental;\n        sales_by_film_category: SalesByFilmCategory;\n        sales_by_store: SalesByStore;\n        staff: Staff;\n        staff_list: StaffList;\n        store: Store;\n    }\n    export const from: <TTable extends Table<DB>>(table: TTable) => import(\"@synthql/queries/src/query\").QueryBuilder<DB, TTable, {}, \"many\", {}, {}, undefined, [\"id\"]>;\n    export function exp<Context>(exp: Exp<Context>): Exp<Context>;\n}\ndeclare module \"@synthql/queries/src/query.test\" { }\ndeclare module \"@synthql/queries/src/expression/dsl\" {\n    import { Exp, Primitive } from \"@synthql/queries/src/expression/Expression\";\n    export function equals<Context>(exp1: Exp<Context>, exp2: Exp<Context>): Exp<Context>;\n    export function isPositive<Context>(exp: Exp<Context>): Exp<Context>;\n    export function isNegative<Context>(exp: Exp<Context>): Exp<Context>;\n    export function isZero<Context>(exp: Exp<Context>): Exp<Context>;\n    export function coalesce<Context>(exp: Exp<Context>, def: Exp<Context>): Exp<Context>;\n    export function isNotNull<Context>(exp: Exp<Context>): Exp<Context>;\n    export function isNull<Context>(exp: Exp<Context>): Exp<Context>;\n    export function sum<Context>(exp: Exp<Context>): Exp<Context>;\n    export function param<Context, TParam extends Primitive>(param: TParam): Exp<Context>;\n    export function literal<Context, TParam extends Primitive>(param: TParam): Exp<Context>;\n    export function when<Context, TReturn>(condition: Exp<Context>, whenTrue: Exp<Context>, whenFalse: Exp<Context>): Exp<Context>;\n    export const cast: {\n        asText: <Context>(exp: Exp<Context>) => Exp<Context>;\n        asNumeric: <Context_1>(exp: Exp<Context_1>) => Exp<Context_1>;\n        asInteger: <Context_2>(exp: Exp<Context_2>) => Exp<Context_2>;\n        asUuid: <Context_3>(exp: Exp<Context_3>) => Exp<Context_3>;\n    };\n    export const json: {\n        get: <Context>(exp: Exp<Context>, key: string) => Exp<Context>;\n        getAsText: <Context_1>(exp: Exp<Context_1>, key: string) => Exp<Context_1>;\n        getAsNumeric: <Context_2>(exp: Exp<Context_2>, key: string) => Exp<Context_2>;\n        agg: <Context_3>(exp: Exp<Context_3>) => Exp<Context_3>;\n        buildObject: <Context_4>(...exp: Exp<Context_4>[]) => Exp<Context_4>;\n    };\n    export function distinct<Context>(exp: Exp<Context>): Exp<Context>;\n    export function count<Context>(exp: Exp<Context>): Exp<Context>;\n    export const jsonb: {\n        buildObject: <Context>(...exp: Exp<Context>[]) => Exp<Context>;\n        agg: <Context_1>(exp: Exp<Context_1>) => Exp<Context_1>;\n    };\n    export function chain<Context>(exp: Exp<Context>, ...fns: Array<(<Context>(exp: Exp<Context>) => Exp<Context>)>): Exp<Context>;\n}\ndeclare module \"@synthql/queries/src/util/isString\" {\n    export function isString(x: unknown): x is string;\n}\n\n declare module \"@synthql/queries\" { export * from \"@synthql/queries/src/index\"; }",
        "fileName": "@synthql/queries/index.d.ts"
    }
]
